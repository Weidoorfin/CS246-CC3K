/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ServerGeminiStreamEvent } from '../core/turn.js';
import { Config } from '../config/config.js';
/**
 * Service for detecting and preventing infinite loops in AI responses.
 * Monitors tool call repetitions and content sentence repetitions.
 */
export declare class LoopDetectionService {
    private readonly config;
    private lastToolCallKey;
    private toolCallRepetitionCount;
    private lastRepeatedSentence;
    private sentenceRepetitionCount;
    private partialContent;
    private turnsInCurrentPrompt;
    private llmCheckInterval;
    private lastCheckTurn;
    constructor(config: Config);
    private getToolCallKey;
    /**
     * Processes a stream event and checks for loop conditions.
     * @param event - The stream event to process
     * @returns true if a loop is detected, false otherwise
     */
    addAndCheck(event: ServerGeminiStreamEvent): boolean;
    /**
     * Signals the start of a new turn in the conversation.
     *
     * This method increments the turn counter and, if specific conditions are met,
     * triggers an LLM-based check to detect potential conversation loops. The check
     * is performed periodically based on the `llmCheckInterval`.
     *
     * @param signal - An AbortSignal to allow for cancellation of the asynchronous LLM check.
     * @returns A promise that resolves to `true` if a loop is detected, and `false` otherwise.
     */
    turnStarted(signal: AbortSignal): Promise<boolean>;
    private checkToolCallLoop;
    private checkContentLoop;
    private checkForLoopWithLLM;
    /**
     * Resets all loop detection state.
     */
    reset(): void;
    private resetToolCallCount;
    private resetSentenceCount;
    private resetLlmCheckTracking;
}
